# Generated by Django 5.2.3 on 2025-06-28 05:52

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("jewelry", "0004_delete_metalrate_delete_product"),
    ]

    operations = [
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Product Name")),
                ("description", models.TextField(verbose_name="Product Description")),
                (
                    "image",
                    models.ImageField(
                        upload_to="product_images/", verbose_name="Product Image"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("rings", "Rings"),
                            ("necklaces", "Necklaces"),
                            ("earrings", "Earrings"),
                            ("bangles", "Bangles"),
                            ("anklets", "Anklets"),
                            ("pendants", "Pendants"),
                            ("bracelets", "Bracelets"),
                            ("mangalsutras", "Mangalsutras"),
                            ("chains", "Chains"),
                            ("nose-pins", "Nose Pins"),
                            ("solitaires", "Solitaires"),
                            ("watch-jewelry", "Watch jewelry"),
                            ("kada", "Kada"),
                            ("mens-jewelry", "Men's jewelry"),
                            ("kids-jewelry", "Kids jewelry"),
                            ("wedding", "Wedding"),
                            ("dailywear", "Dailywear"),
                            ("traditional", "Traditional"),
                            ("modern", "Modern"),
                            ("custom", "Custom"),
                        ],
                        max_length=50,
                        verbose_name="Product Category",
                    ),
                ),
                (
                    "carat",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Diamond/Gemstone carat weight",
                        max_digits=5,
                        verbose_name="Carat Weight",
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total jewelry weight in grams",
                        max_digits=8,
                        verbose_name="Total Weight (grams)",
                    ),
                ),
                (
                    "metal_type",
                    models.CharField(
                        choices=[
                            ("white_gold", "White Gold"),
                            ("yellow_gold", "Yellow Gold"),
                            ("rose_gold", "Rose Gold"),
                            ("platinum", "Platinum"),
                            ("sterling_silver", "Sterling Silver"),
                            ("gold_plated", "Gold Plated"),
                            ("silver_plated", "Silver Plated"),
                        ],
                        max_length=20,
                        verbose_name="Metal Type",
                    ),
                ),
                (
                    "metal_purity",
                    models.CharField(
                        help_text="e.g., 18K, 22K, 24K, 925",
                        max_length=10,
                        verbose_name="Metal Purity",
                    ),
                ),
                (
                    "has_diamond",
                    models.BooleanField(default=False, verbose_name="Has Diamond"),
                ),
                (
                    "has_ruby",
                    models.BooleanField(default=False, verbose_name="Has Ruby"),
                ),
                (
                    "has_sapphire",
                    models.BooleanField(default=False, verbose_name="Has Sapphire"),
                ),
                (
                    "has_emerald",
                    models.BooleanField(default=False, verbose_name="Has Emerald"),
                ),
                (
                    "has_pearl",
                    models.BooleanField(default=False, verbose_name="Has Pearl"),
                ),
                (
                    "has_topaz",
                    models.BooleanField(default=False, verbose_name="Has Topaz"),
                ),
                (
                    "has_other_gemstone",
                    models.BooleanField(
                        default=False, verbose_name="Has Other Gemstone"
                    ),
                ),
                (
                    "other_gemstone_name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Other Gemstone Name",
                    ),
                ),
                (
                    "clarity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("FL", "Flawless (FL)"),
                            ("IF", "Internally Flawless (IF)"),
                            ("VVS1", "Very Very Slightly Included 1 (VVS1)"),
                            ("VVS2", "Very Very Slightly Included 2 (VVS2)"),
                            ("VS1", "Very Slightly Included 1 (VS1)"),
                            ("VS2", "Very Slightly Included 2 (VS2)"),
                            ("SI1", "Slightly Included 1 (SI1)"),
                            ("SI2", "Slightly Included 2 (SI2)"),
                            ("I1", "Included 1 (I1)"),
                            ("I2", "Included 2 (I2)"),
                            ("I3", "Included 3 (I3)"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Clarity Grade",
                    ),
                ),
                (
                    "base_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Base price before any calculations",
                        max_digits=12,
                        verbose_name="Base Price (₹)",
                    ),
                ),
                (
                    "labour_charge",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Labour Charge (₹)",
                    ),
                ),
                (
                    "final_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Final selling price",
                        max_digits=12,
                        verbose_name="Final Price (₹)",
                    ),
                ),
                (
                    "average_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Average Rating",
                    ),
                ),
                (
                    "total_ratings",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Number of Ratings"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("out_of_stock", "Out of Stock"),
                            ("discontinued", "Discontinued"),
                        ],
                        default="active",
                        max_length=20,
                        verbose_name="Product Status",
                    ),
                ),
                (
                    "badge",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("premium", "Premium"),
                            ("best_seller", "Best Seller"),
                            ("new", "New"),
                            ("popular", "Popular"),
                            ("trending", "Trending"),
                            ("limited", "Limited"),
                            ("exclusive", "Exclusive"),
                            ("classic", "Classic"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Product Badge",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="Featured Product"),
                ),
                (
                    "is_bestseller",
                    models.BooleanField(default=False, verbose_name="Best Seller"),
                ),
                (
                    "is_new_arrival",
                    models.BooleanField(default=False, verbose_name="New Arrival"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
            ],
            options={
                "verbose_name": "Product",
                "verbose_name_plural": "Products",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MetalRate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "metal_type",
                    models.CharField(
                        choices=[
                            ("gold", "Gold"),
                            ("silver", "Silver"),
                            ("platinum", "Platinum"),
                            ("diamond", "Diamond"),
                        ],
                        max_length=20,
                        verbose_name="Metal Type",
                    ),
                ),
                (
                    "carat",
                    models.PositiveIntegerField(
                        help_text="For gold: 18, 22, 24. For diamond: carat weight",
                        verbose_name="Carat/Purity",
                    ),
                ),
                (
                    "rate_per_gram",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Current market rate per gram",
                        max_digits=10,
                        verbose_name="Rate per Gram (₹)",
                    ),
                ),
                (
                    "rate_per_carat",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="For diamonds: rate per carat",
                        max_digits=10,
                        null=True,
                        verbose_name="Rate per Carat (₹)",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
            ],
            options={
                "verbose_name": "Metal Rate",
                "verbose_name_plural": "Metal Rates",
                "ordering": ["-updated_at"],
                "unique_together": {("metal_type", "carat")},
            },
        ),
        migrations.CreateModel(
            name="ProductRating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Rating (1-5)",
                    ),
                ),
                (
                    "review",
                    models.TextField(
                        blank=True, null=True, verbose_name="Review/Comment"
                    ),
                ),
                (
                    "customer_name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Customer Name",
                    ),
                ),
                (
                    "customer_email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name="Customer Email",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Rated At"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ratings",
                        to="jewelry.product",
                        verbose_name="Product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Rating",
                "verbose_name_plural": "Product Ratings",
                "ordering": ["-created_at"],
            },
        ),
    ]
